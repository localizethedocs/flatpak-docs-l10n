# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/electron.rst:2
msgid "Electron"
msgstr ""

#: ../../../docs/electron.rst:4
msgid ""
"Due to the nature of `Electron <https://www.electronjs.org/>`_, building "
"Electron applications as Flatpaks requires a few extra steps compared with "
"other applications. Thankfully, several tools and resources are available "
"which make this much easier."
msgstr ""

#: ../../../docs/electron.rst:9
msgid ""
"This guide provides information on how building Electron applications "
"differs from other applications. It also includes information on the tooling "
"for building Electron applications and how to use it."
msgstr ""

#: ../../../docs/electron.rst:13
msgid ""
"The guide walks through the `manifest file <https://github.com/flathub/"
"electron-sample-app/blob/master/flatpak/org.flathub.electron-sample-app."
"yml>`_ of the `sample Electron Flatpak application <https://github.com/"
"flathub/electron-sample-app>`_. Before you start, it is a good idea to take "
"a look at this, either online or by downloading the application."
msgstr ""

#: ../../../docs/electron.rst:22
msgid "Building the sample application"
msgstr ""

#: ../../../docs/electron.rst:24
msgid ""
"While it isn't strictly necessary, you might want to try building and "
"running the sample application yourself."
msgstr ""

#: ../../../docs/electron.rst:27
msgid ""
"To get setup for the build, download or clone the sample app from GitHub, "
"and navigate to the ``/flatpak`` directory in the terminal. Then to build::"
msgstr ""

#: ../../../docs/electron.rst:31
msgid ""
"$ flatpak-builder build org.flathub.electron-sample-app.yml --install-deps-"
"from=flathub --force-clean --user --install"
msgstr ""

#: ../../../docs/electron.rst:33
msgid "Finally, the application can be run with::"
msgstr ""

#: ../../../docs/electron.rst:35
msgid "$ flatpak run org.flathub.electron-sample-app"
msgstr ""

#: ../../../docs/electron.rst:38
msgid "Basic configuration"
msgstr ""

#: ../../../docs/electron.rst:40
msgid ""
"The first part of the sample application's manifest specifies the "
"application's ID. It also configures the runtime and SDK:"
msgstr ""

#: ../../../docs/electron.rst:43
msgid ""
"id: org.flathub.electron-sample-app\n"
"runtime: org.freedesktop.Platform\n"
"runtime-version: '24.08'\n"
"sdk: org.freedesktop.Sdk"
msgstr ""

#: ../../../docs/electron.rst:50
msgid ""
"The Freedesktop runtime is generally the best runtime to use with Electron "
"applications, since it is the most minimal runtime, and other dependencies "
"will be specific to Electron itself."
msgstr ""

#: ../../../docs/electron.rst:55
msgid "The Electron BaseApp"
msgstr ""

#: ../../../docs/electron.rst:57
msgid ""
"Next, the manifest specifies that the Electron BaseApp should be used, by "
"specifying the ``base`` and ``base-version`` properties in the application "
"manifest:"
msgstr ""

#: ../../../docs/electron.rst:61
msgid ""
"base: org.electronjs.Electron2.BaseApp\n"
"base-version: '24.08'"
msgstr ""

#: ../../../docs/electron.rst:66
msgid ""
"BaseApps are described in :doc:`dependencies`. Using the Electron base app "
"is much faster and more convenient than manually building Electron "
"dependencies. It also has the advantage of reducing the amount of "
"duplication on users' machines, since it means that Electron is only saved "
"once on disk."
msgstr ""

#: ../../../docs/electron.rst:72
msgid "The Node.js SDK extension"
msgstr ""

#: ../../../docs/electron.rst:74
msgid ""
"In order to build Electron-based apps, you need Node.js available at build "
"time. Flathub provides Node.js LTS versions as extensions for the SDK, so "
"you can install one of them and add it in your apps' manifest:"
msgstr ""

#: ../../../docs/electron.rst:78
msgid ""
"sdk-extensions:\n"
"  - org.freedesktop.Sdk.Extension.node18"
msgstr ""

#: ../../../docs/electron.rst:83
msgid "Enable the extension by adding it to ``PATH``:"
msgstr ""

#: ../../../docs/electron.rst:85
msgid ""
"build-options:\n"
"  append-path: /usr/lib/sdk/node18/bin"
msgstr ""

#: ../../../docs/electron.rst:90
msgid ""
"Note that the extension name (last portion of reverse-dns notation, "
"``node18`` in this example) must be the same in ``sdk-extensions`` and "
"``append-path``."
msgstr ""

#: ../../../docs/electron.rst:94
msgid "Command"
msgstr ""

#: ../../../docs/electron.rst:96
msgid ""
"The ``command`` property indicates that a script called ``run.sh`` is to be "
"executed to run the application. This will be explained in further detail "
"later."
msgstr ""

#: ../../../docs/electron.rst:100
msgid "command: run.sh"
msgstr ""

#: ../../../docs/electron.rst:105
msgid "Sandbox permissions"
msgstr ""

#: ../../../docs/electron.rst:107
msgid ""
"The standard sandbox :ref:`sandbox-permissions:Permissions guidelines` also "
"apply to Electron applications. However, Electron's Wayland support is still "
"experimental. So for display access, only X11 should be used as the default "
"configuration. This will make Electron use Xwayland in a Wayland session and "
"nothing else is required."
msgstr ""

#: ../../../docs/electron.rst:113
msgid ""
"The sample app also configures PulseAudio for sound and enables network "
"access:"
msgstr ""

#: ../../../docs/electron.rst:116
msgid ""
"finish-args:\n"
"  - --share=ipc\n"
"  - --device=dri\n"
"  - --socket=x11\n"
"  - --socket=pulseaudio\n"
"  - --share=network\n"
"  - --env=ELECTRON_TRASH=gio"
msgstr ""

#: ../../../docs/electron.rst:126
msgid ""
"To allow experimental `native Wayland` support in Electron>=20, the ``--"
"ozone-platform-hint=auto`` flag can be passed to the program. `auto` will "
"choose Wayland when the current session is running under Wayland and "
"Xwayland or X11 otherwise."
msgstr ""

#: ../../../docs/electron.rst:131
msgid ""
"It's recommended to leave actually `enabling` Wayland up to the user for "
"now, i.e. set ``--socket=x11`` in the manifest. Wayland can then be tested "
"with::"
msgstr ""

#: ../../../docs/electron.rst:134
msgid "flatpak run --socket=wayland org.flathub.electron-sample-app"
msgstr ""

#: ../../../docs/electron.rst:137
msgid "Enable native Wayland support by default"
msgstr ""

#: ../../../docs/electron.rst:141
msgid ""
"Native Wayland support in Electron is still experimental and often unstable. "
"It is advised to stick with the X11/Xwayland configuration above as the "
"default."
msgstr ""

#: ../../../docs/electron.rst:145
msgid ""
"To make native Wayland the `default` for users, ``--socket=fallback-x11`` "
"and ``--socket=wayland`` must be used in the manifest."
msgstr ""

#: ../../../docs/electron.rst:148
msgid ""
"For Electron versions between 17 and 27, client-side window decorations "
"under native Wayland can be enabled by passing ``--enable-"
"features=WaylandWindowDecorations`` to the program. For newer versions of "
"Electron , this isn't necessary anymore."
msgstr ""

#: ../../../docs/electron.rst:153
msgid ""
"Electron uses ``libnotify`` on Linux to provide desktop notifications. "
"`Since version 0.8.0 <https://gitlab.gnome.org/GNOME/libnotify/-/"
"merge_requests/27>`_ libnotify automatically uses the `notification portal "
"<https://flatpak.github.io/xdg-desktop-portal/docs/doc-org.freedesktop."
"portal.Notification.html>`_ when inside a sandboxed environment and ``--talk-"
"name=org.freedesktop.Notifications`` is not required anymore. ``org."
"electronjs.Electron2.BaseApp`` includes ``libnotify>=0.8.0`` since "
"``branch/23.08``."
msgstr ""

#: ../../../docs/electron.rst:160
msgid ""
"To ensure proper mouse cursor scaling on HiDPI displays under Wayland, the "
"``XCURSOR_PATH`` environment variable must be set to the host's "
"corresponding directories:"
msgstr ""

#: ../../../docs/electron.rst:164
msgid ""
"finish-args:\n"
"  - --env=XCURSOR_PATH=/run/host/user-share/icons:/run/host/share/icons"
msgstr ""

#: ../../../docs/electron.rst:172
msgid "Using correct desktop file name"
msgstr ""

#: ../../../docs/electron.rst:174
msgid ""
"It's important for Linux applications to set the correct desktop file name. "
"If not, it can lead to problems like missing the window icon under Wayland. "
"By default Electron uses ``{appname}.desktop`` as desktop file name. In "
"Flatpak the name of the desktop file must be the id of the Flatpak. To tell "
"Electron to use another name you need to set the ``desktopName`` key in your "
"``package.json`` e.g. ``\"desktopName\": \"com.example.MyApp.desktop\"``."
msgstr ""

#: ../../../docs/electron.rst:178
msgid ""
"In case you repack a binary, you can use the ``patch-desktop-filename`` "
"script provided by the BaseApp. Each Electron binary ships with ``resources/"
"app.asar`` file. You need to call ``patch-desktop-filename`` with this file "
"as argument. If your application is installed under ``${FLATPAK_DEST}/my-"
"app`` you need to run ``patch-desktop-filename ${FLATPAK_DEST}/my-app/"
"resources/app.asar``."
msgstr ""

#: ../../../docs/electron.rst:183
msgid "Build options"
msgstr ""

#: ../../../docs/electron.rst:185
msgid ""
"These build options aren't strictly necessary, but can be useful if "
"something goes wrong. ``env`` allows setting an array of environment "
"variables, in this case we set ``NPM_CONFIG_LOGLEVEL`` to ``info`` so that "
"``npm`` gives us more detailed error messages."
msgstr ""

#: ../../../docs/electron.rst:191
msgid ""
"build-options:\n"
"  cflags: -O2 -g\n"
"  cxxflags: -O2 -g\n"
"  env:\n"
"    NPM_CONFIG_LOGLEVEL: info"
msgstr ""

#: ../../../docs/electron.rst:201
msgid "The application module"
msgstr ""

#: ../../../docs/electron.rst:203
msgid ""
"The final section of the manifest defines how the application module should "
"be built. This is where some of the additional logic for Electron and Node."
"js can be found."
msgstr ""

#: ../../../docs/electron.rst:207
msgid ""
"By default, ``flatpak-builder`` doesn't allow build tools to access the "
"network. This means that tools which rely on downloading sources will not "
"work. Therefore, Node.js packages must be downloaded prior to running the "
"build. Setting the  ``electron_config_cache`` environment variable means "
"that these will be found when it comes to the build."
msgstr ""

#: ../../../docs/electron.rst:213
msgid ""
"The next part of the manifest describes how the application should be built. "
"The simple buildsystem option is used, which allows a sequence of commands "
"to be specified, which are used for the build. The download location and "
"hash of the application are also specified."
msgstr ""

#: ../../../docs/electron.rst:218
msgid ""
"name: electron-sample-app\n"
"buildsystem: simple\n"
"build-options:\n"
"  env:\n"
"    XDG_CACHE_HOME: /run/build/electron-sample-app/flatpak-node/cache\n"
"    npm_config_cache: /run/build/electron-sample-app/flatpak-node/npm-cache\n"
"    npm_config_nodedir: /usr/lib/sdk/node18\n"
"    npm_config_offline: 'true'\n"
"subdir: main\n"
"sources:\n"
"  - type: archive\n"
"    url: https://github.com/flathub/electron-sample-app/archive/1.0.1.tar."
"gz\n"
"    sha256: "
"a2feb3f1cf002a2e4e8900f718cc5c54db4ad174e48bfcfbddcd588c7b716d5b\n"
"    dest: main"
msgstr ""

#: ../../../docs/electron.rst:236
msgid "Bundling NPM packages"
msgstr ""

#: ../../../docs/electron.rst:238
msgid "The next line is how NPM modules get bundled as part of Flatpaks:"
msgstr ""

#: ../../../docs/electron.rst:240
msgid "- generated-sources.json"
msgstr ""

#: ../../../docs/electron.rst:244
msgid ""
"Since even simple Node.js applications depend on dozens of packages, it "
"would be impractical to specify all of them as part of a manifest file. A "
"`Python script <https://github.com/flatpak/flatpak-builder-tools/tree/master/"
"node>`__ has therefore been developed to download Node.js packages with NPM "
"or Yarn and include them in an application's sources."
msgstr ""

#: ../../../docs/electron.rst:250
msgid ""
"The Python script requires a ``package-lock.json`` (or ``yarn.lock``) file. "
"This file contains information about the packages that an application "
"depends on, and can be generated by running ``npm install --package-lock-"
"only`` from an application's root directory. The script is then run as "
"follows::"
msgstr ""

#: ../../../docs/electron.rst:255
msgid "$ flatpak-node-generator npm package-lock.json"
msgstr ""

#: ../../../docs/electron.rst:257
msgid ""
"This generates the manifest JSON needed to build the NPM/Yarn packages for "
"the application, which are outputted to a file called ``generated-sources."
"json``. The content of this file can be copied to the application's manifest "
"but, because it is often very long, it is often best to link to it from the "
"main manifest, which is done by adding ``generated-source.json`` as a line "
"in the manifest section, as seen above."
msgstr ""

#: ../../../docs/electron.rst:265
msgid "Launching the app"
msgstr ""

#: ../../../docs/electron.rst:267
msgid ""
"The Electron app is run through a simple shell script that wraps `zypak "
"<https://github.com/refi64/zypak>`_. This script can be given any name but "
"must be specified in the manifest's ``command`` property. See below for a "
"sample wrapper to launch the app:"
msgstr ""

#: ../../../docs/electron.rst:272
msgid ""
"- type: script\n"
"  dest-filename: run.sh\n"
"  commands:\n"
"    - zypak-wrapper /app/main/electron-sample-app \"$@\""
msgstr ""

#: ../../../docs/electron.rst:280
msgid "Build commands"
msgstr ""

#: ../../../docs/electron.rst:282
msgid ""
"Last but not least, since the ``simple`` buildsystem is being used, a list "
"of build commands must be provided. As can be seen, ``npm`` is run with the "
"``npm_config_offline=true`` environment variable, installing dependencies "
"from packages that have already been cached. These are copied to ``/app/main/"
"``. Finally the ``run.sh`` script is installed to ``/app/bin/`` so that it "
"will be on ``$PATH``:"
msgstr ""

#: ../../../docs/electron.rst:289
msgid ""
"build-commands:\n"
"  # Install npm dependencies\n"
"  - npm install --offline\n"
"  # Build the app; in this example the `dist` script\n"
"  # in package.json runs electron-builder\n"
"  - |\n"
"    . ../flatpak-node/electron-builder-arch-args.sh\n"
"    npm run dist -- $ELECTRON_BUILDER_ARCH_ARGS  --linux --dir\n"
"  # Bundle app and dependencies\n"
"  - cp -a dist/linux*unpacked /app/main\n"
"  # Install app wrapper\n"
"  - install -Dm755 -t /app/bin/ ../run.sh"
msgstr ""

#: ../../../docs/electron.rst:304
msgid ""
"Note that if the application you are trying to package contains a ``build`` "
"block in ``package.json`` with instructions for Linux, this can cause "
"``electron-builder`` to try to fetch additional binaries at build-time (Even "
"if `--dir` option is used). The following example shows a configuration that "
"will try to download AppImage binaries:"
msgstr ""

#: ../../../docs/electron.rst:306
msgid ""
"\"build\": {\n"
"  \"linux\": {\n"
"    \"target\": \"AppImage\",\n"
"  }\n"
"}"
msgstr ""

#: ../../../docs/electron.rst:314
msgid ""
"The preferred way of fixing this, is not a patch, but a build-time edit "
"using ``jq``. The following command will replace ``\"target\": "
"\"AppImage\"`` with ``\"target\": \"dir\"``:"
msgstr ""

#: ../../../docs/electron.rst:316
msgid "jq '.build.linux.target=\"dir\"' <<<$(<package.json) > package.json"
msgstr ""

#: ../../../docs/electron.rst:321
msgid "Make setProgressBar and setBadgeCount work"
msgstr ""

#: ../../../docs/electron.rst:322
msgid ""
"The `setProgressBar <https://www.electronjs.org/docs/latest/api/browser-"
"window#winsetprogressbarprogress-options>`_ and `setBadgeCount <https://www."
"electronjs.org/docs/latest/api/app#appsetbadgecountcount-linux-macos>`_ "
"functions allow showing a progress bar and a badge count in the window icon. "
"It is implemented under Linux using the `UnityLauncherAPI <https://wiki."
"ubuntu.com/Unity/LauncherAPI>`_. This API is not implemented on every "
"desktop environment. A known desktop environment which implements this is "
"KDE. It is also implemented by the popular `Dash to Dock <https://micheleg."
"github.io/dash-to-dock>`_ GNOME extension and `Plank <https://launchpad.net/"
"plank>`_."
msgstr ""

#: ../../../docs/electron.rst:325
msgid ""
"To make it work in Flatpak, the app needs to :ref:`use the correct desktop "
"filename <use-correct-desktop-filename>` in its embedded `package.json` "
"file. The Flatpak also needs the ``--talk-name=com.canonical.Unity`` "
"permission. Electron versions earlier than v32 checks `checks if it's "
"running on Unity or KDE <https://github.com/electron/electron/blob/"
"fb88375ab4d2161dbf7e958a2a94c7c6d97dc84c/shell/browser/linux/unity_service."
"cc#L64>`_ before using the UnityLauncherAPI."
msgstr ""
