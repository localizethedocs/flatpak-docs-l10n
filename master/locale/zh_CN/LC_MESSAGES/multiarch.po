# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 07:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/multiarch.rst:2
msgid "Multiarch support"
msgstr ""

#: ../../../docs/multiarch.rst:4
msgid ""
"Flatpak has multiarch/multilib support, but it's not enabled by default and "
"require some additional steps to enable it. This section covers enabling "
"multiarch/multilib in your application bundle."
msgstr ""

#: ../../../docs/multiarch.rst:9
msgid "Running 32-bit programs"
msgstr ""

#: ../../../docs/multiarch.rst:11
msgid ""
"In order to set up the run time environment for 32-bit executables, first "
"you'll need to allow it in ``finish-args``:"
msgstr ""

#: ../../../docs/multiarch.rst:14
msgid ""
"finish-args:\n"
"  - --allow=multiarch"
msgstr ""

#: ../../../docs/multiarch.rst:19
msgid ""
"This is enough for static binaries, but most real-world GNU/Linux programs "
"are linked dynamically. Those need some shared libraries to work."
msgstr ""

#: ../../../docs/multiarch.rst:22
msgid ""
"Freedesktop.org and GNOME SDKs both provide a special flatpak extension with "
"a set of libraries for corresponding architecture. This extension can be "
"attached to an app of different architecture. In order to enable the "
"extension for your app, define an extension point for it in the app manifest:"
msgstr ""

#: ../../../docs/multiarch.rst:27
msgid ""
"add-extensions:\n"
"  org.freedesktop.Platform.Compat.i386:\n"
"    directory: lib/i386-linux-gnu\n"
"    version: '24.08'\n"
"\n"
"  # This is not strictly required, but needed for debugging 32-bit programs\n"
"  org.freedesktop.Platform.Compat.i386.Debug:\n"
"    directory: lib/debug/lib/i386-linux-gnu\n"
"    version: '24.08'\n"
"    no-autodownload: true"
msgstr ""

#: ../../../docs/multiarch.rst:40
msgid "For GNOME runtime, use ``org.gnome.Platform.Compat.i386`` instead."
msgstr ""

#: ../../../docs/multiarch.rst:42
msgid ""
"Note that this extension ``version`` must match the ``runtime-version`` of "
"the application."
msgstr ""

#: ../../../docs/multiarch.rst:45
msgid ""
"If the 32-bit programs make use of GPU acceleration, or have some graphical "
"UI in general, you'll also need 32-bit GL drivers. Add an extension point "
"for it:"
msgstr ""

#: ../../../docs/multiarch.rst:48
msgid ""
"runtime: org.freedesktop.Platform\n"
"runtime-version: &runtime-version '24.08'\n"
"# Synced from Freedesktop runtime\n"
"# https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/"
"ed97d222b21d0a8744779ce6e5e8af5b032bfee1/elements/flatpak-images/include/"
"platform-vars.yml#L2\n"
"x-gl-version: &gl-version '1.4'\n"
"x-gl-versions: &gl-versions 24.08;1.4\n"
"x-gl-merge-dirs: &gl-merge-dirs vulkan/icd.d;glvnd/egl_vendor.d;egl/"
"egl_external_platform.d;OpenCL/vendors;lib/dri;lib/d3d;lib/gbm;vulkan/"
"explicit_layer.d;vulkan/implicit_layer.d\n"
"\n"
"org.freedesktop.Platform.GL32:\n"
"  directory: lib/i386-linux-gnu/GL\n"
"  version: *gl-version\n"
"  versions: *gl-versions\n"
"  subdirectories: true\n"
"  no-autodownload: true\n"
"  autodelete: false\n"
"  add-ld-path: lib\n"
"  merge-dirs: *gl-merge-dirs\n"
"  download-if: active-gl-driver\n"
"  enable-if: active-gl-driver\n"
"  autoprune-unless: active-gl-driver\n"
"\n"
"org.freedesktop.Platform.GL32.Debug:\n"
"  directory: lib/debug/lib/i386-linux-gnu/GL\n"
"  version: *gl-version\n"
"  versions: *gl-versions\n"
"  subdirectories: true\n"
"  no-autodownload: true\n"
"  merge-dirs: *gl-merge-dirs\n"
"  enable-if: active-gl-driver\n"
"  autoprune-unless: active-gl-driver\n"
"\n"
"org.freedesktop.Platform.VAAPI.Intel.i386:\n"
"  directory: lib/i386-linux-gnu/dri/intel-vaapi-driver\n"
"  version: *runtime-version\n"
"  versions: *runtime-version\n"
"  autodelete: false\n"
"  no-autodownload: true\n"
"  add-ld-path: lib\n"
"  download-if: have-intel-gpu\n"
"  autoprune-unless: have-intel-gpu"
msgstr ""

#: ../../../docs/multiarch.rst:91
msgid ""
"Note that the ``x-gl-versions`` property here must contain both ``1.4`` and "
"the same value as in ``runtime-version``."
msgstr ""

#: ../../../docs/multiarch.rst:94
msgid ""
"Make sure to create directories where the extensions will be mounted (the "
"mount points are specified in ``directory`` properties and are relative to "
"the app bundle mount point, i.e. to ``/app/``). This can be done at stage of "
"the build."
msgstr ""

#: ../../../docs/multiarch.rst:98
msgid ""
"Finally, you need to make the dynamic library loader know the paths to 32-"
"bit libraries. In order to do this, you can install a ``/app/etc/ld.so."
"conf`` file with contents like this:"
msgstr ""

#: ../../../docs/multiarch.rst:102
msgid ""
"/app/lib32\n"
"/app/lib/i386-linux-gnu"
msgstr ""

#: ../../../docs/multiarch.rst:107
msgid ""
"Here ``/app/lib32`` is the directory where you install additional 32-bit "
"libraries, if any."
msgstr ""

#: ../../../docs/multiarch.rst:110
msgid "You can combine the above two steps in a special module, e.g."
msgstr ""

#: ../../../docs/multiarch.rst:112
msgid ""
"modules:\n"
"  - name: bundle-setup\n"
"    buildsystem: simple\n"
"    build-commands:\n"
"      - mkdir -p /app/lib/i386-linux-gnu\n"
"      - mkdir -p /app/lib/debug/lib/i386-linux-gnu\n"
"      - mkdir -p /app/lib/i386-linux-gnu/GL\n"
"      - mkdir -p /app/lib/i386-linux-gnu/dri/intel-vaapi-driver\n"
"      - install -Dm644 ld.so.conf /app/etc/ld.so.conf\n"
"    sources:\n"
"      - type: inline\n"
"        dest-filename: ld.so.conf\n"
"        contents: |\n"
"          /app/lib32\n"
"          /app/lib/i386-linux-gnu"
msgstr ""

#: ../../../docs/multiarch.rst:132
msgid "Building 32-bit modules"
msgstr ""

#: ../../../docs/multiarch.rst:134
msgid ""
"The section above describes how to run 32-bit programs that are already "
"built. This section will describe the process of building 32-bit components "
"yourself to ship them with the application. It assumes that you are already "
"familiar with building (single-arch) flatpaks. If not, please refer to :doc:"
"`flatpak-builder` guide first."
msgstr ""

#: ../../../docs/multiarch.rst:140
msgid "First of all, you'll need to enable some SDK extensions at build time:"
msgstr ""

#: ../../../docs/multiarch.rst:142
msgid ""
"sdk-extensions:\n"
"  - org.freedesktop.Sdk.Compat.i386\n"
"  - org.freedesktop.Sdk.Extension.toolchain-i386"
msgstr ""

#: ../../../docs/multiarch.rst:148
msgid ""
"The first one is the 32-bit portion of the SDK, containing 32-bit libraries "
"and development files."
msgstr ""

#: ../../../docs/multiarch.rst:151
msgid ""
"The second one is a cross-compiler. Usually ``gcc -m32`` is used for "
"multilib builds, but the flatpak SDK comes with gcc without multilib "
"support. Thus, you will need a cross-compiler for building x86 on x86_64 "
"just as you would need it for any foreign architecture like aarch64."
msgstr ""

#: ../../../docs/multiarch.rst:156
msgid ""
"In order to build a 32-bit module, some global build options needs to be "
"overridden. Examples here assume that 32-bit libraries are installed in ``/"
"app/lib32`` directory:"
msgstr ""

#: ../../../docs/multiarch.rst:160
msgid ""
"modules:\n"
"  - name: some-lib-32bit\n"
"    build-options: &compat-i386-build-options\n"
"      # Make sure 32-bit dependencies are first on pkg-config search path\n"
"      prepend-pkg-config-path: /app/lib32/pkgconfig:/usr/lib/i386-linux-gnu/"
"pkgconfig\n"
"      # Add /app/lib32 to linker search path for modules without pkg-config\n"
"      ldflags: -L/app/lib32\n"
"      # Add the cross-compiler to PATH\n"
"      prepend-path: /usr/lib/sdk/toolchain-i386/bin\n"
"      # Tell the build systems to use the cross-compiler for compilation\n"
"      env:\n"
"        CC: i686-unknown-linux-gnu-gcc\n"
"        CXX: i686-unknown-linux-gnu-g++\n"
"      # Tell the build systems to install libraries to /app/lib32\n"
"      libdir: /app/lib32"
msgstr ""

#: ../../../docs/multiarch.rst:178
msgid ""
"These ``build-options`` need to be set for each 32-bit module. If your app "
"manifest is in YAML format, the YAML anchors can come in handy and save you "
"from copy-pasting the same snippet. You can define the 32-bit ``build-"
"options`` object somewhere in the manifest, add an anchor to it, and then "
"point each 32-bit modules' ``build-options`` to that anchor:"
msgstr ""

#: ../../../docs/multiarch.rst:184
msgid ""
"x-compat-i386-build-options: &compat-i386-build-options\n"
"  prepend-pkg-config-path: /app/lib32/pkgconfig:/usr/lib/i386-linux-gnu/"
"pkgconfig\n"
"  ldflags: -L/app/lib32\n"
"  prepend-path: /usr/lib/sdk/toolchain-i386/bin\n"
"  env:\n"
"    CC: i686-unknown-linux-gnu-gcc\n"
"    CXX: i686-unknown-linux-gnu-g++\n"
"  libdir: /app/lib32\n"
"\n"
"modules:\n"
"  - name: some-lib-32bit\n"
"    build-options: *compat-i386-build-options\n"
"\n"
"  - name: some-other-lib-32bit\n"
"    build-options: *compat-i386-build-options"
msgstr ""

#: ../../../docs/multiarch.rst:202
msgid ""
"Of course, in order to actually use 32-bit modules you've build, you'll also "
"need all the same setup from the previous section."
msgstr ""
