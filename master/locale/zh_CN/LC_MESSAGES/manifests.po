# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 08:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/manifests.rst:2
msgid "Manifests"
msgstr ""

#: ../../../docs/manifests.rst:4
msgid ""
"The input to ``flatpak-builder`` is a JSON or YAML file that describes the "
"parameters for building an application, as well as instructions for each of "
"the modules that are to be built. This file is called the manifest."
msgstr ""

#: ../../../docs/manifests.rst:8
msgid ""
"This page provides information and guidance on how to use manifests, "
"including an explanation of the most common parameters that can be "
"specified. It is recommended to have followed the :doc:`first-build` "
"tutorial before reading this section, and to be familiar with :doc:`flatpak-"
"builder`."
msgstr ""

#: ../../../docs/manifests.rst:13
msgid ""
"Manifest files should be named using the application ID. For example, the "
"manifest file for GNOME Dictionary is named ``org.gnome.Dictionary.yml``. "
"This page uses this manifest file for all its examples."
msgstr ""

#: ../../../docs/manifests.rst:17
msgid ""
"A complete list of all the properties that can be specified in manifest "
"files can be found in the :doc:`flatpak-builder-command-reference`, as well "
"as the ``flatpak-manifest`` man page."
msgstr ""

#: ../../../docs/manifests.rst:22
msgid "Basic properties"
msgstr ""

#: ../../../docs/manifests.rst:24
msgid ""
"Each manifest file should specify basic information about the application "
"that is to be built, including the ``id``, ``runtime``, ``runtime-version``, "
"``sdk`` and ``command`` parameters. These properties are typically specified "
"at the beginning of the file."
msgstr ""

#: ../../../docs/manifests.rst:29
msgid "For example, the GNOME Dictionary manifest includes:"
msgstr ""

#: ../../../docs/manifests.rst:31
msgid ""
"id: org.gnome.Dictionary\n"
"runtime: org.gnome.Platform\n"
"runtime-version: '48'\n"
"sdk: org.gnome.Sdk\n"
"command: gnome-dictionary"
msgstr ""

#: ../../../docs/manifests.rst:39
msgid ""
"Specifying a runtime and runtime version allows that the runtime that is "
"needed by your application to be automatically installed on users' systems."
msgstr ""

#: ../../../docs/manifests.rst:43
msgid "File renaming"
msgstr ""

#: ../../../docs/manifests.rst:45
msgid ""
"Exports are application files that are made available to the host, and "
"include things like the application's ``.desktop`` file and icon."
msgstr ""

#: ../../../docs/manifests.rst:48
msgid ""
"The names of files that are exported by a Flatpak must be prefixed using the "
"application ID, such as ``org.gnome.Dictionary.desktop``. The best way to do "
"this is to rename these files directly in the application's source."
msgstr ""

#: ../../../docs/manifests.rst:52
msgid ""
"If renaming exported files to use the application ID is not possible, "
"``flatpak-builder`` allows them to be renamed as part of the build process. "
"This can be done by specifying one of the following properties in the "
"manifest:"
msgstr ""

#: ../../../docs/manifests.rst:57
msgid "``rename-icon`` - rename the application icon"
msgstr ""

#: ../../../docs/manifests.rst:58
msgid "``rename-desktop-file`` - rename the ``.desktop`` filename"
msgstr ""

#: ../../../docs/manifests.rst:59
msgid "``rename-appdata-file`` - rename the MetaInfo file"
msgstr ""

#: ../../../docs/manifests.rst:61
msgid ""
"Each of these properties accepts the name of the source file to be renamed. "
"``flatpak-builder`` then automatically renames the file to match the "
"application ID. Note that this renaming method can introduce internal naming "
"conflicts, and that renaming files in tree is therefore the most reliable "
"approach."
msgstr ""

#: ../../../docs/manifests.rst:68
msgid "Finishing"
msgstr ""

#: ../../../docs/manifests.rst:70
msgid ""
"Applications that are run with Flatpak have extremely limited access to the "
"host environment by default, but applications require access to resources "
"outside of their sandbox in order to be useful. Finishing is the build stage "
"where the application's sandbox permissions are specified, in order to give "
"access to these resources."
msgstr ""

#: ../../../docs/manifests.rst:76
msgid ""
"The finishing manifest section uses the ``finish-args`` property, which can "
"be seen in the Dictionary manifest file:"
msgstr ""

#: ../../../docs/manifests.rst:79
msgid ""
"finish-args:\n"
"  # X11 + XShm access\n"
"  - --share=ipc\n"
"  - --socket=fallback-x11\n"
"  # Wayland access\n"
"  - --socket=wayland\n"
"  # GPU acceleration if needed\n"
"  - --device=dri\n"
"  # Needs to talk to the network:\n"
"  - --share=network\n"
"  # Needs to save files locally\n"
"  - --filesystem=xdg-documents"
msgstr ""

#: ../../../docs/manifests.rst:94
msgid ""
"Guidance on which permissions to use can be found in the :doc:`sandbox-"
"permissions`."
msgstr ""

#: ../../../docs/manifests.rst:98
msgid "Cleanup"
msgstr ""

#: ../../../docs/manifests.rst:100
msgid ""
"The cleanup property can be used to remove files produced by the build "
"process that are not wanted as part of the application, such as headers or "
"developer documentation. Two properties in the manifest file are used for "
"this. This can be either done for each modules in which case only names "
"created by that module will be matched or at the toplevel which will match "
"anything created in the entire manifest."
msgstr ""

#: ../../../docs/manifests.rst:107
msgid ""
"Items starting with `/` are taken to be relative to the prefix, so ``/"
"include`` will cleanup ``/app/include``, otherwise it matches the basename."
msgstr ""

#: ../../../docs/manifests.rst:111
msgid "First, a list of filename patterns can be included::"
msgstr ""

#: ../../../docs/manifests.rst:113
msgid ""
"cleanup:\n"
"  - '/include'\n"
"  - '/bin/foo-*'\n"
"  - '*.a'"
msgstr ""

#: ../../../docs/manifests.rst:118
msgid ""
"A cleanup with ``*``, at the `module level` will cleanup all artifacts built "
"from that module. This is often useful for build dependencies of a module "
"that does not need to be shipped in the final Flatpak package::"
msgstr ""

#: ../../../docs/manifests.rst:122
msgid ""
"cleanup:\n"
"  - '*'"
msgstr ""

#: ../../../docs/manifests.rst:125
msgid "The `cleanup-commands` property can be a list of cleanup commands::"
msgstr ""

#: ../../../docs/manifests.rst:127
msgid ""
"cleanup-commands:\n"
"  - 'find /app/bin -mindepth 1 -maxdepth 1  -name 'rpm*' ! -name 'rpm2cpio' -"
"delete'"
msgstr ""

#: ../../../docs/manifests.rst:130
msgid ""
"Note that, instead of cleaning up unnecessary files, it is often better to "
"build less components through ``config-opts, build-commands, make-args``. "
"For example, if the application does not need documentation files or "
"manpages, it's best to stop building them. This should make the build faster "
"in some cases and reduce the need for excessive cleanups."
msgstr ""

#: ../../../docs/manifests.rst:137
msgid "Modules"
msgstr ""

#: ../../../docs/manifests.rst:139
msgid ""
"The module list specifies each of the modules that are to be built as part "
"of the build process. One of these modules is the application itself, and "
"other modules are dependencies and libraries that are bundled as part of the "
"Flatpak. While simple applications may only specify one or two modules, and "
"therefore have short modules sections, some applications can bundle numerous "
"modules and therefore have lengthy modules sections."
msgstr ""

#: ../../../docs/manifests.rst:146
msgid ""
"Modules are built in the order they are declared in the manifest. If any "
"module changes, that module and all the subsequent modules below it will be "
"rebuilt, otherwise it should use the cache."
msgstr ""

#: ../../../docs/manifests.rst:150
msgid ""
"The general recommendation is to place the \"main\" module, usually the "
"module for the main application as the last module in the manifest but if "
"there is a module which gets updated often and is independent from the rest, "
"that module can also be placed as the last module to avoid rebuilding "
"everything else."
msgstr ""

#: ../../../docs/manifests.rst:156
msgid ""
"Modules can either be nested to clearly show the dependency structure or be "
"linearly declared."
msgstr ""

#: ../../../docs/manifests.rst:159
msgid ""
"# Nested\n"
"\n"
"finish-args:\n"
"  - --share=ipc\n"
"  - --socket=fallback-x11\n"
"  - --socket=wayland\n"
"  - --socket=pulseaudio\n"
"\n"
"  modules:\n"
"    - name: video-player-app\n"
"      buildsystem: meson\n"
"      config-opts:\n"
"        - --buildtype=release\n"
"      cleanup:\n"
"        - /share/man\n"
"      sources:\n"
"        - type: archive\n"
"          url: https://example.com/release.tar.gz\n"
"          sha256: "
"216656c4495bb3ca02dc4ad9cf3da8e8f15c8f80e870eeac8eb1eedab4c3788b\n"
"      modules:\n"
"        - name: libmpv\n"
"          buildsystem: meson\n"
"          config-opts:\n"
"            - -Dlibmpv=true\n"
"          sources:\n"
"            - type: archive\n"
"              url: https://example.com/mpv.tar.gz\n"
"              sha256: "
"2ca92437affb62c2b559b4419ea4785c70d023590500e8a52e95ea3ab4554683\n"
"          modules:\n"
"            - \"shared-modules/lua5.1/lua-5.1.5.json\"\n"
"\n"
"            - name: libv4l2\n"
"              buildsystem: meson\n"
"              sources:\n"
"                - type: archive\n"
"                  url: url: https://example.com/libv4l2.tar.gz\n"
"                  sha256: "
"0fa075ce59b6618847af6ea191b6155565ccaa44de0504581ddfed795a328a82\n"
"# Linear\n"
"\n"
"finish-args:\n"
"  - --share=ipc\n"
"  - --socket=fallback-x11\n"
"  - --socket=wayland\n"
"  - --socket=pulseaudio\n"
"\n"
"  modules:\n"
"    - \"shared-modules/lua5.1/lua-5.1.5.json\"\n"
"\n"
"    - name: libv4l2\n"
"      buildsystem: meson\n"
"      sources:\n"
"        - type: archive\n"
"          url: url: https://example.com/libv4l2.tar.gz\n"
"          sha256: "
"0fa075ce59b6618847af6ea191b6155565ccaa44de0504581ddfed795a328a82\n"
"\n"
"    - name: libmpv\n"
"      buildsystem: meson\n"
"       config-opts:\n"
"         - -Dlibmpv=true\n"
"      sources:\n"
"        - type: archive\n"
"          url: https://example.com/mpv.tar.gz\n"
"          sha256: "
"2ca92437affb62c2b559b4419ea4785c70d023590500e8a52e95ea3ab4554683\n"
"\n"
"    - name: video-player-app\n"
"      buildsystem: meson\n"
"      config-opts:\n"
"        - --buildtype=release\n"
"      cleanup:\n"
"        - /share/man\n"
"      sources:\n"
"        - type: archive\n"
"          url: https://example.com/release.tar.gz\n"
"          sha256: "
"216656c4495bb3ca02dc4ad9cf3da8e8f15c8f80e870eeac8eb1eedab4c3788b"
msgstr ""

#: ../../../docs/manifests.rst:236
msgid ""
"As can be seen, each listed module has a ``name`` (which can be freely "
"assigned) and a list of ``sources``. Each source has a ``type``, and "
"available types include:"
msgstr ""

#: ../../../docs/manifests.rst:240
msgid "``archive`` - ``.tar`` or ``.zip`` archive files"
msgstr ""

#: ../../../docs/manifests.rst:241
msgid "``git`` - Git repositories"
msgstr ""

#: ../../../docs/manifests.rst:242
msgid "``bzr`` - Bazaar repositories"
msgstr ""

#: ../../../docs/manifests.rst:243
msgid ""
"``file`` - local/remote files (these are copied into the source directory)"
msgstr ""

#: ../../../docs/manifests.rst:244
msgid ""
"``dir`` - local directories (these are copied into the source directory)"
msgstr ""

#: ../../../docs/manifests.rst:245
msgid ""
"``script`` - an array of shell commands (these are put in a shellscript file)"
msgstr ""

#: ../../../docs/manifests.rst:247
msgid ""
"``shell`` - an array of shell commands that are run during source extraction"
msgstr ""

#: ../../../docs/manifests.rst:248
msgid "``patch`` - a patch (are applied to the source directory)"
msgstr ""

#: ../../../docs/manifests.rst:249
msgid ""
"``extra-data`` - data that can be downloaded at install time; this can "
"include archive or package files"
msgstr ""

#: ../../../docs/manifests.rst:252
msgid ""
"Different properties are available for each source type, which are listed in "
"the :doc:`module-sources`."
msgstr ""

#: ../../../docs/manifests.rst:256
msgid "Supported build systems"
msgstr ""

#: ../../../docs/manifests.rst:258
msgid "Modules can be built with a variety of build systems, including:"
msgstr ""

#: ../../../docs/manifests.rst:260
msgid ""
"`autotools <https://www.gnu.org/software/automake/manual/html_node/Autotools-"
"Introduction.html>`_"
msgstr ""

#: ../../../docs/manifests.rst:261
msgid "`cmake <https://cmake.org/>`_"
msgstr ""

#: ../../../docs/manifests.rst:262
msgid "`cmake-ninja <https://cmake.org/cmake/help/v3.0/generator/Ninja.html>`_"
msgstr ""

#: ../../../docs/manifests.rst:263
msgid "`meson <https://mesonbuild.com/>`_"
msgstr ""

#: ../../../docs/manifests.rst:264
msgid "`qmake <https://doc.qt.io/archives/qt-5.15/qmake-overview.html>`_"
msgstr ""

#: ../../../docs/manifests.rst:266
msgid ""
"A \"simple\" build method is also available, which allows a series of "
"commands to be specified."
msgstr ""

#: ../../../docs/manifests.rst:269
msgid ""
"Each of the above buildsystem sets up the installation prefix, libdir etc. "
"and runs a series of commands to configure (``meson setup``, or ``./autogen."
"sh, ./configure`` or ``cmake``), build, install (``ninja install, make "
"install`` etc.) and optionally run tests (``make check, ninja test`` etc.)."
msgstr ""

#: ../../../docs/manifests.rst:275
msgid ""
"Thus they can also be achieved by using the ``simple`` buildsystem and "
"manually specifying the commands."
msgstr ""

#: ../../../docs/manifests.rst:280
msgid ""
"Using the proper buildsystem is almost always preferred rather than manually "
"handling the correct setup."
msgstr ""

#: ../../../docs/manifests.rst:283
msgid "An example is provided below."
msgstr ""

#: ../../../docs/manifests.rst:285
msgid ""
"# Using autotools without configure\n"
"- name: ffnvcodec\n"
"  buildsystem: autotools\n"
"  no-autogen: true\n"
"  make-install-args:\n"
"    - PREFIX=/app\n"
"  sources:\n"
"    - type: git\n"
"      url: https://github.com/FFmpeg/nv-codec-headers.git\n"
"      commit: 43d91706e097565f57b311e567f0219838bcc2f6\n"
"      tag: n11.1.5.3\n"
"\n"
"# Using meson buildsystem\n"
"- name: libdrm\n"
"  buildsystem: meson\n"
"  builddir: true\n"
"  config-opts:\n"
"    - -Dtests=false\n"
"  sources:\n"
"    - type: git\n"
"      url: https://gitlab.freedesktop.org/mesa/drm.git\n"
"      tag: libdrm-2.4.124\n"
"\n"
"# Using simple\n"
"\n"
"- name: ffnvcodec\n"
"  buildsystem: simple\n"
"  build-commands:\n"
"    - make -j$FLATPAK_BUILDER_N_JOBS PREFIX=/app install\n"
"  sources:\n"
"    - type: git\n"
"      url: https://github.com/FFmpeg/nv-codec-headers.git\n"
"      commit: 43d91706e097565f57b311e567f0219838bcc2f6\n"
"      tag: n11.1.5.3\n"
"\n"
"- name: libdrm\n"
"  buildsystem: simple\n"
"  build-commands:\n"
"    - meson setup builddir --prefix=/app --libdir=/app/lib -Dtests=false\n"
"    - ninja -C builddir install\n"
"  sources:\n"
"    - type: git\n"
"      url: https://gitlab.freedesktop.org/mesa/drm.git\n"
"      tag: libdrm-2.4.124"
msgstr ""

#: ../../../docs/manifests.rst:333
msgid "Shared Modules"
msgstr ""

#: ../../../docs/manifests.rst:335
msgid ""
"Flathub contains a `shared modules <https://github.com/flathub/shared-"
"modules>`_ repository containing build manifests for commonly used modules. "
"These are usally shared by apps on Flathub and maintained in a single place. "
"The repository is intended to be used as a git submodule."
msgstr ""

#: ../../../docs/manifests.rst:340
msgid ""
"Please see the `readme <https://github.com/flathub/shared-modules/blob/"
"master/README.md>`_ for details on how to use this."
msgstr ""

#: ../../../docs/manifests.rst:344
msgid "Flatpak Builder Tools"
msgstr ""

#: ../../../docs/manifests.rst:346
msgid ""
"`Flatpak Builder Tools (or flatpak-builder-tools) <https://github.com/"
"flatpak/flatpak-builder-tools>`_ is a collection of scripts to aid using "
"`flatpak-builder`. In this repository, each directory contains instructions "
"to generate a manifest for the respective platform."
msgstr ""

#: ../../../docs/manifests.rst:349
msgid "Example manifests"
msgstr ""

#: ../../../docs/manifests.rst:351
msgid ""
"Flathub hosts a large collection of applications and the respective "
"manifests can be browsed and searched via `GitHub <https://github.com/"
"flathub>`_."
msgstr ""
