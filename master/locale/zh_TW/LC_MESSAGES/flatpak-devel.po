# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 08:26+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/flatpak-devel.rst:2
msgid "Flatpak as a developer platform"
msgstr "Flatpak 作為開發者平臺"

#: ../../../docs/flatpak-devel.rst:4
msgid ""
"This sections contains an overview on how Flatpak can be used as part of a "
"developer workflow."
msgstr ""

#: ../../../docs/flatpak-devel.rst:8
msgid "CI Integration"
msgstr ""

#: ../../../docs/flatpak-devel.rst:10
msgid ""
"Flatpak can be integrated with the CI pipelines and bundles can be produced "
"as artifacts for quick testing or it can be exported to a Flatpak repository "
"on a webserver to provide a Nightly Flatpak package."
msgstr ""

#: ../../../docs/flatpak-devel.rst:14
msgid ""
"The CI setup will vary based on the code host and the CI service being used. "
"A basic workflow for exporting to Gitlab pages is provided in :doc:`hosting-"
"a-repository` which can be used as a starting point."
msgstr ""

#: ../../../docs/flatpak-devel.rst:18
msgid ""
"`GNOME <https://gitlab.gnome.org/GNOME/Initiatives/-/wikis/DevOps-with-"
"Flatpak#basic-ci>`_ and `KDE <https://develop.kde.org/docs/packaging/flatpak/"
"publishing/#publishing-to-kdes-nightly-repositories>`_ also has their own "
"respective CI setup for doing this, which can be also be used for "
"inspiration."
msgstr ""

#: ../../../docs/flatpak-devel.rst:23
msgid ""
"`Flatpak Github Actions <https://github.com/flathub-infra/flatpak-github-"
"actions>`_ can be used for GitHub."
msgstr ""

#: ../../../docs/flatpak-devel.rst:27
msgid "Running tests"
msgstr ""

#: ../../../docs/flatpak-devel.rst:29
msgid ""
"Flatpak Builder can also run tests with ``run-tests, test-rule, test-"
"commands, test-args``."
msgstr ""

#: ../../../docs/flatpak-devel.rst:31
msgid ""
"``run-tests: true`` in a module will run tests for that module after "
"installing."
msgstr ""

#: ../../../docs/flatpak-devel.rst:34
msgid ""
"``test-rule`` is the default target to build when running tests. For "
"``meson`` an ``cmake-ninja`` buildsystems it defaults to ``test``, otherwise "
"``check`` for ``cmake`` and ``autotools``. Setting it to an empty string "
"like ``test-rule: ''`` will disable the target."
msgstr ""

#: ../../../docs/flatpak-devel.rst:39
msgid ""
"``test-commands`` is an array of additional commands that will be run during "
"tests."
msgstr ""

#: ../../../docs/flatpak-devel.rst:42
msgid ""
"run-tests: true\n"
"test-rule: ''\n"
"test-commands:\n"
"   - xvfb-run tests/test_foo"
msgstr ""

#: ../../../docs/flatpak-devel.rst:49
msgid ""
"``test-args`` is used to provide finish-args for tests. These do not affect "
"the normal installation."
msgstr ""

#: ../../../docs/flatpak-devel.rst:52
msgid ""
"build-options:\n"
"    test-args:\n"
"        - \"--socket=x11\"\n"
"        - \"--share=network\""
msgstr ""

#: ../../../docs/flatpak-devel.rst:60
msgid "Parallel nightly and stable applications"
msgstr ""

#: ../../../docs/flatpak-devel.rst:62
msgid ""
"In general stable and nightly versions or any two parallel branches of an "
"application should have different application IDs. This prevents many "
"potential conflicts such as incompatible configuration files or overlapping "
"well-known D-Bus names. This is mandatory if the application uses its own "
"well-known D-Bus name."
msgstr ""

#: ../../../docs/flatpak-devel.rst:68
msgid ""
"A standard way is to use the ``.Devel`` suffix to the original Flatpak ID. "
"The internal application ID, appstream ID, launchable, icon tags, icon "
"files, desktop files, Dbus service names etc. must follow the new Flatpak ID "
"for everything to work seamlessly for the user."
msgstr ""

#: ../../../docs/flatpak-devel.rst:73
msgid ""
"This can be integrated with buildsystem `profiles`, so simply building with "
"``-Dprofile=Devel`` for example will build the Nightly application and the "
"default will build the stable appliction."
msgstr ""

#: ../../../docs/flatpak-devel.rst:78
msgid "Buildsystem handling"
msgstr ""

#: ../../../docs/flatpak-devel.rst:80
msgid "This is an example for the Meson buildsystem."
msgstr ""

#: ../../../docs/flatpak-devel.rst:82
msgid ""
"The ``src`` subdirectory will contain the main source code of the "
"application and ``data`` subdirectory will have application metadata such as "
"desktop file, metainfo file, icons and the ``po`` subdirectory will have "
"translation files."
msgstr ""

#: ../../../docs/flatpak-devel.rst:87
msgid "The root ``meson.build`` parts should be something like this:"
msgstr ""

#: ../../../docs/flatpak-devel.rst:89
msgid ""
"i18n = import('i18n')\n"
"\n"
"profile = get_option('profile')\n"
"if profile == 'development'\n"
"  application_id = 'org.example.coolapp.Devel'\n"
"else\n"
"  application_id = 'org.example.coolapp'\n"
"endif\n"
"\n"
"config_h = configuration_data()\n"
"config_h.set_quoted('APPLICATION_ID', application_id)\n"
"config_h.set_quoted('PROFILE', profile)\n"
"config_h.set_quoted('GETTEXT_PACKAGE', 'coolapp')\n"
"config_h.set_quoted('PACKAGE_VERSION', meson.project_version())\n"
"configure_file(\n"
"   output: 'config.h',\n"
"   configuration: config_h,\n"
")\n"
"\n"
"configuration_inc = include_directories('.')\n"
"\n"
"subdir('data')\n"
"subdir('src')\n"
"subdir('po')\n"
"\n"
"summary({\n"
"  'Profile': get_option('profile'),\n"
"}, section: 'Development')"
msgstr ""

#: ../../../docs/flatpak-devel.rst:121
msgid "The root ``meson-options.txt`` should have something like::"
msgstr ""

#: ../../../docs/flatpak-devel.rst:123
msgid ""
"option('profile', type: 'combo', choices: ['default', 'development'], value: "
"'default')"
msgstr ""

#: ../../../docs/flatpak-devel.rst:125
msgid ""
"Now under ``src/meson.build`` or in any subdirectory this can be specified "
"in a target."
msgstr ""

#: ../../../docs/flatpak-devel.rst:128
msgid ""
"coolapp = executable('coolapp', 'main.c',\n"
"    include_directories: configuration_inc,\n"
"    dependencies: libcoolapp_dep,\n"
"    install: true,\n"
")"
msgstr ""

#: ../../../docs/flatpak-devel.rst:136
msgid ""
"Now in ``data/meson.build``, the icon, desktop file and metainfo file "
"handling can be specified."
msgstr ""

#: ../../../docs/flatpak-devel.rst:139
msgid ""
"Place a desktop template file called ``org.example.coolapp.desktop.in.in`` "
"in ``data/`` with the contents"
msgstr ""

#: ../../../docs/flatpak-devel.rst:142
msgid ""
"[Desktop Entry]\n"
"Name=Cool App\n"
"Exec=coolapp\n"
"Icon=@icon@\n"
"Terminal=false\n"
"Type=Application\n"
"Categories=Utility;\n"
"StartupNotify=true"
msgstr ""

#: ../../../docs/flatpak-devel.rst:154
msgid "The corresponding meson bits for the desktop file should be"
msgstr ""

#: ../../../docs/flatpak-devel.rst:156
msgid ""
"desktop_conf = configuration_data()\n"
"desktop_conf.set('icon', application_id)\n"
"desktop_file = i18n.merge_file(\n"
"  input: configure_file(\n"
"    input: files('org.example.coolapp.desktop.in.in'),\n"
"    output: 'org.example.coolapp.desktop.in',\n"
"    configuration: desktop_conf,\n"
"  ),\n"
"  output: '@0@.desktop'.format(application_id),\n"
"  type: 'desktop',\n"
"  po_dir: '../po',\n"
"  install: true,\n"
"  install_dir: get_option('datadir') / 'applications',\n"
")\n"
"desktop_utils = find_program('desktop-file-validate', required: false)\n"
"if desktop_utils.found()\n"
"  test('Validate desktop file', desktop_utils, args: [desktop_file])\n"
"endif"
msgstr ""

#: ../../../docs/flatpak-devel.rst:177
msgid ""
"Appstream can be handled in the same ``meson.build``. Place a metainfo "
"template file in ``data/``. Any tag containing part of the application ID "
"should be templated. Ususally for desktop applications this involves only "
"the ``id`` and ``launchable`` tag, but the ``icon`` tag, if present should "
"also use it."
msgstr ""

#: ../../../docs/flatpak-devel.rst:183
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<component type=\"desktop\">\n"
"  <id>@appid@</id>\n"
"  ...\n"
"  <launchable type=\"desktop-id\">@appid@.desktop</launchable>\n"
"  ...\n"
"</component>"
msgstr ""

#: ../../../docs/flatpak-devel.rst:193
msgid "The corresponding meson.build part for metainfo should be"
msgstr ""

#: ../../../docs/flatpak-devel.rst:195
msgid ""
"metainfo_conf = configuration_data()\n"
"metainfo_conf.set('appid', application_id)\n"
"appstream_file = i18n.merge_file(\n"
"  input: configure_file(\n"
"    input: files('org.example.coolapp.metainfo.xml.in.in'),\n"
"    output: 'org.example.coolapp.metainfo.xml.in',\n"
"    configuration: metainfo_conf\n"
"  ),\n"
"  output: '@0@.metainfo.xml'.format(application_id),\n"
"  po_dir: '../po',\n"
"  install: true,\n"
"  install_dir: get_option('datadir') / 'metainfo',\n"
")\n"
"\n"
"appstreamcli = find_program('appstreamcli', required: false)\n"
"if (appstreamcli.found())\n"
"  test('Validate metainfo file',\n"
"    appstreamcli,\n"
"    args: ['validate', '--no-net', '--explain', appstream_file],\n"
"    workdir: meson.current_build_dir()\n"
"  )\n"
"endif"
msgstr ""

#: ../../../docs/flatpak-devel.rst:220
msgid ""
"Finally icons can be placed in ``data/icons/hicolor/{scalable, symbolic}/"
"apps``. Two icons should be provided ``org.example.coolapp.svg`` and ``org."
"example.coolapp.Devel.svg``. The meson.build should have"
msgstr ""

#: ../../../docs/flatpak-devel.rst:224
msgid ""
"icondir = join_paths('icons', 'hicolor', 'scalable', 'apps')\n"
"install_data(\n"
"  join_paths(icondir, '@0@.svg'.format(application_id)),\n"
"  install_dir: join_paths(datadir, icondir),\n"
"  rename: '@0@.svg'.format(application_id)\n"
")\n"
"\n"
"icondir = join_paths('icons', 'hicolor', 'symbolic', 'apps')\n"
"install_data(\n"
"  join_paths(icondir, 'org.example.coolapp-symbolic.svg'),\n"
"  install_dir: join_paths(datadir, icondir),\n"
"  rename: '@0@-symbolic.svg'.format(application_id)\n"
")"
msgstr ""

#: ../../../docs/flatpak-devel.rst:240
msgid "Any gschemea file should also be similarly handled if present."
msgstr ""

#: ../../../docs/flatpak-devel.rst:242
msgid ""
"install_data('org.example.coolapp.gschema.xml',\n"
"  rename: '@0@.gschema.xml'.format(application_id),\n"
"  install_dir: get_option('datadir') / 'glib-2.0' / 'schemas',\n"
")"
msgstr ""

#: ../../../docs/flatpak-devel.rst:249
msgid ""
"Any dbus service file if present should be handled. The ``org.example."
"coolapp.service.in`` should have ``Name=@appid@``"
msgstr ""

#: ../../../docs/flatpak-devel.rst:252
msgid ""
"service_conf = configuration_data()\n"
"service_conf.set('appid', application_id)\n"
"service_conf.set('bindir', join_paths(prefix, bindir))\n"
"configure_file(\n"
"  input: 'org.example.coolapp.service.in',\n"
"  output: '@0@.service'.format(application_id),\n"
"  configuration: service_conf,\n"
"  install_dir: servicedir\n"
")"
msgstr ""

#: ../../../docs/flatpak-devel.rst:264
msgid ""
"The same pattern can be used for search provider files if present. The ``org."
"example.coolapp.service.ini.in`` should look like"
msgstr ""

#: ../../../docs/flatpak-devel.rst:267
msgid ""
"DesktopId=@appid@.desktop\n"
"BusName=@appid@\n"
"ObjectPath=/org/gnome/AppName@profile@/SearchProvider"
msgstr ""

#: ../../../docs/flatpak-devel.rst:273
msgid "and the corresponding meson.build:"
msgstr ""

#: ../../../docs/flatpak-devel.rst:275
msgid ""
"search_provider_conf = configuration_data()\n"
"search_provider_conf.set('appid', application_id)\n"
"search_provider_conf.set('profile', profile)\n"
"configure_file(\n"
"  configuration: search_provider_conf,\n"
"  input: files('org.example.coolapp.service.ini.in'),\n"
"  install_dir: join_paths(datadir, 'gnome-shell', 'search-providers'),\n"
"  output: '@0@.search-provider.ini'.format(application_id)\n"
")"
msgstr ""

#: ../../../docs/flatpak-devel.rst:288
msgid "Application handling"
msgstr ""

#: ../../../docs/flatpak-devel.rst:290
msgid ""
"The correct application ID must be supplied when initiating the application. "
"For example in ``main.c``"
msgstr ""

#: ../../../docs/flatpak-devel.rst:293
msgid ""
"#include \"config.h\"\n"
"\n"
"...\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"\n"
"  ...\n"
"\n"
"  g_set_prgname (APPLICATION_ID);\n"
"  gtk_window_set_default_icon_name (APPLICATION_ID);\n"
"\n"
"  coolapp = g_object_new (APP_NAME_TYPE_APPLICATION,\n"
"                          \"application-id\", APPLICATION_ID,\n"
"                          \"flags\", G_APPLICATION_HANDLES_OPEN,\n"
"                          NULL);\n"
"\n"
"  g_application_run (G_APPLICATION (coolapp), argc, argv);\n"
"\n"
"  return 0;\n"
"}"
msgstr ""

#: ../../../docs/flatpak-devel.rst:318
msgid ""
"Similarly it can be handled in the about dialogue of the application and "
"elsewhere."
msgstr ""

#: ../../../docs/flatpak-devel.rst:322
msgid "Manifest handling"
msgstr ""

#: ../../../docs/flatpak-devel.rst:324
msgid ""
"Finally there must be two manifests for Devel and stable - ``org.example."
"coolapp.Devel.yaml`` and ``org.example.coolapp.yaml`` respectively."
msgstr ""

#: ../../../docs/flatpak-devel.rst:327
msgid ""
"The manifest must have the correct ``id`` property. The devel manifest "
"should use ``id: org.example.coolapp.Devel`` and the stable manifest should "
"use ``id: org.example.coolapp``."
msgstr ""

#: ../../../docs/flatpak-devel.rst:331
msgid ""
"In ``config-opts`` for the application module, ``-Dprofile=Devel`` can be "
"passed to build the Devel application."
msgstr ""

#: ../../../docs/flatpak-devel.rst:334
msgid ""
"In case, buildsystem handling for desktop file, icon and metainfo file is "
"absent ``rename-desktop-file, rename-appdata-file, rename-mime-file, rename-"
"icon`` can be used rename the files to match the ``.Devel`` application ID."
msgstr ""

#: ../../../docs/flatpak-devel.rst:338
msgid ""
"``desktop-file-name-prefix`` or ``desktop-file-name-suffix`` can be used to "
"add a prefix or suffix to the desktop file name respectively."
msgstr ""

#: ../../../docs/flatpak-devel.rst:341
msgid ""
"id: org.example.coolapp.Devel\n"
"...\n"
"rename-desktop-file: org.example.coolapp.desktop\n"
"rename-appdata-file: org.example.coolapp.metainfo.xml\n"
"rename-icon: org.example.coolapp\n"
"desktop-file-name-suffix: ' (Nightly)'"
msgstr ""

#: ../../../docs/flatpak-devel.rst:351
msgid ""
"The main drawback of modifying it in place with Flatpak Builder is that, the "
"application ID, D-Bus names and configuration location cannot be changed. "
"This might cause integration issues with desktop environment, potential "
"configuration conflicts, or the application might not run in some cases when "
"the D-Bus name is already in use. This would prevent running the stable and "
"nightly applications parallely."
msgstr ""

#: ../../../docs/flatpak-devel.rst:359
msgid ""
"In case the application ID remains static, for GTK based applications the "
"``--name`` flag can be passed to the main binary with the correct "
"application ID; ``--class`` and ``StartupWMClass`` in the desktop file to "
"fix the window class."
msgstr ""

#: ../../../docs/flatpak-devel.rst:366
msgid "Additional tools"
msgstr ""

#: ../../../docs/flatpak-devel.rst:368
msgid ""
"`Electron Builder <https://www.electron.build/flatpak.html>`_ supports "
"exporting single file Flatpak bundles. Please also see the Electron "
"application packaging guide :doc:`electron`."
msgstr ""

#: ../../../docs/flatpak-devel.rst:372
msgid ""
"`GNOME Builder <https://apps.gnome.org/Builder/>`_ is an IDE that can "
"integrate with the development workflow of GNOME applications. `Qt Creator "
"<https://flathub.org/apps/io.qt.QtCreator>`_ and `Qt Design Studio <https://"
"flathub.org/apps/io.qt.qtdesignstudio>`_ are both available as Flatpaks from "
"Flathub along with a variety of IDEs."
msgstr ""

#: ../../../docs/flatpak-devel.rst:378
msgid ""
"`Freedesktop SDK <https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/wikis/"
"Freedesktop-SDK-Flatpak-repository>`_ and `GNOME Nightly <https://nightly."
"gnome.org/>`_ hosts nightly versions of the ``org.freedesktop.Platform`` and "
"``org.gnome.Platform`` runtimes and SDKs."
msgstr ""

#: ../../../docs/flatpak-devel.rst:383
msgid ""
"`GNOME OS <https://os.gnome.org/>`_ is an immutable Flatpak first system "
"that can also be used to build and test applications on upcoming GNOME "
"versions."
msgstr ""

#: ../../../docs/flatpak-devel.rst:387
msgid ""
"Freedesktop SDK also builds Mesa from the git main branch. Please see the "
"`docs <https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/wikis/mesa-"
"git>`_ on how to use that."
msgstr ""

#: ../../../docs/flatpak-devel.rst:391
msgid ""
"`Flathub hosts <https://github.com/flathub?q=org.freedesktop.Sdk."
"Extension&type=all&language=&sort=>`_ extensions for lots of tooling and "
"languages that can be used to build applications."
msgstr ""
