# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 07:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/debugging.rst:2
msgid "Debugging"
msgstr ""

#: ../../../docs/debugging.rst:4
msgid "This section includes documentation on how to debug Flatpak apps."
msgstr ""

#: ../../../docs/debugging.rst:7
msgid "Debug packages"
msgstr ""

#: ../../../docs/debugging.rst:9
msgid ""
"Before debugging, it is essential to install the debug packages used by the "
"application. This can be done by::"
msgstr ""

#: ../../../docs/debugging.rst:13
msgid "$ flatpak install --include-sdk --include-debug $FLATPAK_ID"
msgstr ""

#: ../../../docs/debugging.rst:15
msgid ""
"This will install the SDK, the Debug SDK and the Debug extension for the "
"application."
msgstr ""

#: ../../../docs/debugging.rst:18
msgid ""
"If it's a crash in the graphics stack, the GL debug extension will also be "
"needed."
msgstr ""

#: ../../../docs/debugging.rst:21
msgid "First, note down the runtime branch used by the application::"
msgstr ""

#: ../../../docs/debugging.rst:23
msgid ""
"$ flatpak info --show-runtime $FLATPAK_ID\n"
"org.freedesktop.Platform/x86_64/24.08"
msgstr ""

#: ../../../docs/debugging.rst:26
msgid ""
"In the above example it is the Freedesktop SDK and the branch is ``24.08``. "
"Then install the ``GL.debug`` extension for the above branch::"
msgstr ""

#: ../../../docs/debugging.rst:29
msgid ""
"$ flatpak install org.freedesktop.Platform.{GL,GL32}.Debug.default//24.08"
msgstr ""

#: ../../../docs/debugging.rst:31
msgid ""
"The same process should be followed for any extension or baseapp used by the "
"app."
msgstr ""

#: ../../../docs/debugging.rst:35
msgid "Debug shell"
msgstr ""

#: ../../../docs/debugging.rst:37
msgid ""
"A debugging environment can be created by starting a shell inside the "
"sandbox::"
msgstr ""

#: ../../../docs/debugging.rst:40
msgid "$ flatpak run --command=sh --devel --filesystem=$(pwd) $FLATPAK_ID"
msgstr ""

#: ../../../docs/debugging.rst:42
msgid ""
"This creates a sandbox for the application with the given ID and, instead of "
"running the application, runs a shell inside the sandbox. The ``--devel`` "
"option tells Flatpak to use the SDK as the runtime, which includes various "
"debugging tools and it also adjusts the sandbox setup to enable debugging."
msgstr ""

#: ../../../docs/debugging.rst:48
msgid ""
"It is also possible to get a shell inside an application sandbox without "
"having to install it. This is done using ``flatpak-builder``'s ``--run`` "
"option::"
msgstr ""

#: ../../../docs/debugging.rst:52
msgid "$ flatpak-builder --run <build-dir> <manifest> sh"
msgstr ""

#: ../../../docs/debugging.rst:54
msgid ""
"This sets up a sandbox that is populated with the build results found in the "
"build directory, and runs a shell inside it."
msgstr ""

#: ../../../docs/debugging.rst:58
msgid "Using GDB in the sandbox"
msgstr ""

#: ../../../docs/debugging.rst:60
msgid ""
"Note that :ref:`debugging:Debug packages` must be installed to get "
"meaningful traces from GDB. Once inside the :ref:`debugging:Debug shell` to "
"run the application with ``gdb`` ::"
msgstr ""

#: ../../../docs/debugging.rst:64
msgid "$ gdb /app/bin/<application-binary>"
msgstr ""

#: ../../../docs/debugging.rst:66
msgid "To pass arguments to the application::"
msgstr ""

#: ../../../docs/debugging.rst:68
msgid ""
"$ gdb --args /app/bin/<application-binary> <arguments>\n"
"$ (gdb) run"
msgstr ""

#: ../../../docs/debugging.rst:71
msgid ""
"A breakpoint can also be set for example on the ``main`` function and once "
"it is reached the source code can be listed::"
msgstr ""

#: ../../../docs/debugging.rst:74
msgid ""
"$ (gdb) break main\n"
"  (gdb) run\n"
"  (gdb) list"
msgstr ""

#: ../../../docs/debugging.rst:78
msgid ""
"Once the bug is reproduced, if it is a crash it will automatically return to "
"the gdb prompt. In case of a freeze pressing Ctrl+c will cause it to return "
"to the gdb prompt. Now enable logging to a file (this will be saved in the "
"working directory and the Flatpak needs filesystem access to that ``--"
"filesystem=$(pwd)``)::"
msgstr ""

#: ../../../docs/debugging.rst:84
msgid "$ (gdb) set logging enabled on"
msgstr ""

#: ../../../docs/debugging.rst:86
msgid "Then to get the backtrace::"
msgstr ""

#: ../../../docs/debugging.rst:88
msgid "$ (gdb) bt full"
msgstr ""

#: ../../../docs/debugging.rst:90
msgid "Or for all threads, in case of a multi-threaded program::"
msgstr ""

#: ../../../docs/debugging.rst:92
msgid "$ (gdb) thread apply all backtrace"
msgstr ""

#: ../../../docs/debugging.rst:94
msgid ""
"Note that ``gdb`` inside the sandbox cannot use debug symbols from host's "
"`debuginfod servers <https://sourceware.org/elfutils/Debuginfod.html>`_."
msgstr ""

#: ../../../docs/debugging.rst:97
msgid ""
"Please also see the `GDB user manual <https://sourceware.org/gdb/current/"
"onlinedocs/gdb.html/>`_ for a more complete overview on how to use GDB."
msgstr ""

#: ../../../docs/debugging.rst:101
msgid "Getting stacktraces from a crash"
msgstr ""

#: ../../../docs/debugging.rst:103
msgid ""
"If an application crashed and the system has coredumps and `systemd-coredump "
"<https://www.freedesktop.org/software/systemd/man/latest/systemd-coredump."
"html#>`_ enabled, a coredump will be logged. Get the ``PID`` from that "
"coredump::"
msgstr ""

#: ../../../docs/debugging.rst:107
msgid "$ coredumpctl list"
msgstr ""

#: ../../../docs/debugging.rst:109
msgid ""
"Now run ``flatpak-coredumpctl`` (this requires :ref:`debugging:Debug "
"packages` to be installed)::"
msgstr ""

#: ../../../docs/debugging.rst:112
msgid ""
"$ flatpak-coredumpctl -m <PID> $FLATPAK_ID\n"
"(gdb) bt full"
msgstr ""

#: ../../../docs/debugging.rst:116
msgid "Using other debugging tools"
msgstr ""

#: ../../../docs/debugging.rst:119
msgid ""
"``org.freedesktop.Sdk`` also includes other debugging tools like `Valgrind "
"<https://valgrind.org/>`_ which is useful to find memory leaks. Once inside "
"the :ref:`debugging:Debug shell`, it can be run with::"
msgstr ""

#: ../../../docs/debugging.rst:123
msgid ""
"$ valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --log-"
"file=\"valgrind.log\" /app/bin/<application-binary>"
msgstr ""

#: ../../../docs/debugging.rst:125
msgid ""
"`Strace <https://strace.io/>`_ can be useful to check what an application is "
"doing. For example, to trace ``openat(), read()`` calls::"
msgstr ""

#: ../../../docs/debugging.rst:128
msgid ""
"$ strace -e trace=openat,read -o strace.log -f /app/bin/<application-binary>"
msgstr ""

#: ../../../docs/debugging.rst:130
msgid ""
"`Perf <https://perfwiki.github.io/main/>`_ requires access to ``--"
"filesystem=/sys`` to run::"
msgstr ""

#: ../../../docs/debugging.rst:133
msgid ""
"$ flatpak run --command=perf --filesystem=/sys --filesystem=$(pwd) --devel "
"$FLATPAK_ID record -v -- <command>"
msgstr ""

#: ../../../docs/debugging.rst:136
msgid "Multiple Debug shells in one sandbox"
msgstr ""

#: ../../../docs/debugging.rst:138
msgid ""
"Sometimes it can be helpful to have multiple debugging shells at a time in "
"the same sandox. For example, some debugging commands such as `dotnet-dump "
"<https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump>`_ "
"expect to be given an identifier for a running process that it will connect "
"to for debugging. This essentially requires multiple instances of the :ref:"
"`debugging:Debug shell`, one to run the app, and one for running the "
"debugging tool."
msgstr ""

#: ../../../docs/debugging.rst:146
msgid ""
"To accomplish this, locate either the instance or process ID of an existing "
"debug shell with::"
msgstr ""

#: ../../../docs/debugging.rst:149 ../../../docs/debugging.rst:219
msgid "$ flatpak ps"
msgstr ""

#: ../../../docs/debugging.rst:151
msgid "Then you can enter this same sandbox from a new terminal window using::"
msgstr ""

#: ../../../docs/debugging.rst:153
msgid "$ flatpak enter <instance id> /bin/bash"
msgstr ""

#: ../../../docs/debugging.rst:155
msgid ""
"Note that this second shell likely will not be configured identically to the "
"original debug shell (for example it will likely have different environment "
"variables such as PATH)."
msgstr ""

#: ../../../docs/debugging.rst:159
msgid ""
"You can verify whether both the shells are indeed in the same sandbox by "
"checking the namespaces visible in each debug shell and verifying that they "
"are the same. The easiest way to do this is to list the visible namespaces "
"using::"
msgstr ""

#: ../../../docs/debugging.rst:164
msgid "$ lsns --type pid"
msgstr ""

#: ../../../docs/debugging.rst:167
msgid "Creating a Debug extension"
msgstr ""

#: ../../../docs/debugging.rst:169
msgid ""
"Like many other packaging systems, Flatpak separates bulky debug information "
"from regular content and ships it separately, in a Debug  extension."
msgstr ""

#: ../../../docs/debugging.rst:172
msgid ""
"When an application is built, ``flatpak-builder`` automatically creates a "
"Debug extension. This can be disabled with the ``no-debuginfo`` option."
msgstr ""

#: ../../../docs/debugging.rst:176
msgid ""
"To install the Debug extension created locally, pass ``--install`` to "
"``flatpak-builder`` which will set up a new remote for the build. The "
"remotes available can be checked with::"
msgstr ""

#: ../../../docs/debugging.rst:180
msgid "$ flatpak remotes --columns=name,url"
msgstr ""

#: ../../../docs/debugging.rst:182
msgid "Then install the Debug extension from that remote::"
msgstr ""

#: ../../../docs/debugging.rst:184
msgid "$ flatpak install foo-origin $FLATPAK_ID.Debug"
msgstr ""

#: ../../../docs/debugging.rst:187
msgid "Overriding sandbox permissions"
msgstr ""

#: ../../../docs/debugging.rst:189
msgid ""
"It is sometimes useful to have extra permissions in a sandbox when "
"debugging. This can be achieved using the various sandbox options that are "
"accepted by the run command. For example::"
msgstr ""

#: ../../../docs/debugging.rst:193
msgid ""
"$ flatpak run --devel --command=sh --system-talk-name=org.freedesktop.login1 "
"<application-id>"
msgstr ""

#: ../../../docs/debugging.rst:195
msgid ""
"This command runs a shell in the sandbox for the given application, granting "
"it system bus access to the bus name owned by logind."
msgstr ""

#: ../../../docs/debugging.rst:199
msgid "Inspecting portal permissions"
msgstr ""

#: ../../../docs/debugging.rst:201
msgid ""
"Flatpak has a number of commands that allow to manage portal permissions for "
"applications."
msgstr ""

#: ../../../docs/debugging.rst:204
msgid "To see all portal permissions of an application, use::"
msgstr ""

#: ../../../docs/debugging.rst:206
msgid "$ flatpak permission-show <application-id>"
msgstr ""

#: ../../../docs/debugging.rst:208
msgid "To reset all portal permissions of an application, use::"
msgstr ""

#: ../../../docs/debugging.rst:210
msgid "$ flatpak permission-reset <application-id>"
msgstr ""

#: ../../../docs/debugging.rst:214
msgid "Interacting with running sandboxes"
msgstr ""

#: ../../../docs/debugging.rst:216
msgid ""
"You can see all the apps that are currently running in Flatpak sandboxes "
"(since 1.2)::"
msgstr ""

#: ../../../docs/debugging.rst:221
msgid "And, if you need to, you can terminate one by force (since 1.2)::"
msgstr ""

#: ../../../docs/debugging.rst:223
msgid "$ flatpak kill <application-id>"
msgstr ""

#: ../../../docs/debugging.rst:226
msgid "Audit session or system bus traffic"
msgstr ""

#: ../../../docs/debugging.rst:228
msgid ""
"A ``--socket=session-bus`` or a ``--socket=system-bus`` permission must not "
"be present for the logging to work."
msgstr ""

#: ../../../docs/debugging.rst:231
msgid ""
"Session bus traffic can be audited by passing ``--log-session-bus`` to "
"``flatpak run``::"
msgstr ""

#: ../../../docs/debugging.rst:234
msgid "flatpak run --log-session-bus <application-id>"
msgstr ""

#: ../../../docs/debugging.rst:236
msgid ""
"This can be useful to figure out the bus names used by an application and "
"the corresponding ``--talk-name`` or ``--own-name`` permissions required::"
msgstr ""

#: ../../../docs/debugging.rst:240
msgid "flatpak --log-session-bus run <application-id>| grep '(required 1)'"
msgstr ""

#: ../../../docs/debugging.rst:242
msgid ""
"Similarly, system bus traffic can be audited by passing ``--log-system-bus`` "
"to ``flatpak run``. This also requires a system bus name to be present in "
"the permissions. If not a bogus bus name can be passed::"
msgstr ""

#: ../../../docs/debugging.rst:246
msgid ""
"flatpak run --log-system-bus --system-talk-name=org.example.foo <application-"
"id>"
msgstr ""
