# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 07:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/desktop-integration.rst:2
msgid "Desktop Integration"
msgstr ""

#: ../../../docs/desktop-integration.rst:4
msgid ""
":doc:`conventions` covers the essential aspects of Linux desktop "
"integration. This page provides further information on optional desktop "
"integration features. It also provides guidance on how applications can "
"ensure that their user interfaces fit into the whole range of Linux desktops "
"and distributions."
msgstr ""

#: ../../../docs/desktop-integration.rst:10
msgid ""
"This information is primarily intended for developers who are new to Linux. "
"However, it is also relevant to desktop-specific Linux applications seeking "
"to target a broader range of Linux environments."
msgstr ""

#: ../../../docs/desktop-integration.rst:14
msgid ""
"While targeting the Linux desktop ecosystem might seem challenging, the "
"existence of common standards, in combination with these guidelines, means "
"that supporting the full range of Linux environments needn't be difficult."
msgstr ""

#: ../../../docs/desktop-integration.rst:19
msgid "Locale detection"
msgstr ""

#: ../../../docs/desktop-integration.rst:21
msgid ""
"Application toolkits, such as Electron, GTK and Qt, provide built-in support "
"for detecting which locale to use. Otherwise, the ``setlocale`` function can "
"be used."
msgstr ""

#: ../../../docs/desktop-integration.rst:26
msgid "Portals"
msgstr ""

#: ../../../docs/desktop-integration.rst:28
msgid ""
"Portals are the framework for securely accessing resources from outside an "
"application sandbox. They provide a range of common features to "
"applications, including:"
msgstr ""

#: ../../../docs/desktop-integration.rst:32
msgid "Determining network status"
msgstr ""

#: ../../../docs/desktop-integration.rst:33
msgid "Opening a file with a file chooser"
msgstr ""

#: ../../../docs/desktop-integration.rst:34
msgid "Opening URIs"
msgstr ""

#: ../../../docs/desktop-integration.rst:35
msgid "Preventing the device from suspending, sleeping, or powering off"
msgstr ""

#: ../../../docs/desktop-integration.rst:36
msgid "Printing"
msgstr ""

#: ../../../docs/desktop-integration.rst:37
msgid "Sending email"
msgstr ""

#: ../../../docs/desktop-integration.rst:38
msgid "Showing notifications"
msgstr ""

#: ../../../docs/desktop-integration.rst:39
msgid "Taking screenshots and screencasts"
msgstr ""

#: ../../../docs/desktop-integration.rst:41
msgid "Toolkits like GTK and Qt provide transparent support for portals."
msgstr ""

#: ../../../docs/desktop-integration.rst:48
msgid ""
"If you are not using one of these toolkits, it is possible to access the "
"portal API directly. See `XDG Desktop Portal <https://flatpak.github.io/xdg-"
"desktop-portal/>`_ for more information."
msgstr ""

#: ../../../docs/desktop-integration.rst:54
msgid "Notifications"
msgstr ""

#: ../../../docs/desktop-integration.rst:56
msgid ""
"A number of toolkits and frameworks provide transparent support for Linux "
"desktop notifications. These include Electron, GTK, KDE and QML."
msgstr ""

#: ../../../docs/desktop-integration.rst:60
msgid "Status icons"
msgstr ""

#: ../../../docs/desktop-integration.rst:62
msgid ""
"Status icons are similar to the system tray or taskbar on Windows, or menu "
"bar icons on macOS. These are supported on most Linux distributions through "
"abstractions such as libappindicator."
msgstr ""

#: ../../../docs/desktop-integration.rst:66
msgid ""
"A number of Linux distributions don't show status icons. It is still "
"possible to provide a status icon, and it will be shown in some "
"distributions. However, to ensure compatibility, it is recommended to use "
"status icons only in a supplementary manner, rather than relying on them as "
"the only mechanism for providing status information or access to particular "
"features. These include \"minimize to tray\" (or equivalent) functionality."
msgstr ""

#: ../../../docs/desktop-integration.rst:73
msgid ""
"XEmbed style icons will function on desktops that support them with the "
"``x11`` permission."
msgstr ""

#: ../../../docs/desktop-integration.rst:77
msgid "StatusNotifier"
msgstr ""

#: ../../../docs/desktop-integration.rst:79
msgid ""
"StatusNotifier style icons will not function without extra permissions, as "
"they require talking to a non-hardened host service. Risks include "
"impersonation of other softwares and exploitation of bugs in host services "
"such as image decoders."
msgstr ""

#: ../../../docs/desktop-integration.rst:83
msgid ""
"To use StatusNotifier, you must at least have the ``--talk-name=org.kde."
"StatusNotifierWatcher`` permission to register an item."
msgstr ""

#: ../../../docs/desktop-integration.rst:86
msgid ""
"Depending on the exact implementation of StatusNotifier that your "
"application is using, it may need session bus ownership of ``org.kde."
"StatusNotifierItem-$PID-$ITEM_ID``."
msgstr ""

#: ../../../docs/desktop-integration.rst:89
msgid ""
"This permission is problematic in Flatpak as the ``$PID`` value is often the "
"same in sandboxes, leading to potential conflicts with other applications. "
"However, if needed, the ``--own-name=org.kde.*`` permission will allow this."
msgstr ""

#: ../../../docs/desktop-integration.rst:94
msgid ""
"This introduces many new risks, including the ability to impersonate any KDE "
"service or application, possibly capturing important user data."
msgstr ""

#: ../../../docs/desktop-integration.rst:97
msgid ""
"Most implementations of StatusNotifier have dropped this requirement, but "
"known exceptions include Electron versions older than 23.3.0."
msgstr ""

#: ../../../docs/desktop-integration.rst:100
msgid ""
"Current versions of Electron, Chromium, KNotifications, and libappindicator "
"are known to work without ownership permissions."
msgstr ""

#: ../../../docs/desktop-integration.rst:104
msgid "System search"
msgstr ""

#: ../../../docs/desktop-integration.rst:106
msgid ""
"GNOME-based distributions, like CentOS, Fedora, Red Hat Enterprise Linux and "
"Ubuntu, offer the option to integrate with system search by providing a "
"`search provider <https://developer.gnome.org/documentation/tutorials/search-"
"provider.html>`_. This allows application-provided search results to appear "
"in the Activities Overview."
msgstr ""

#: ../../../docs/desktop-integration.rst:112
msgid "Window controls"
msgstr ""

#: ../../../docs/desktop-integration.rst:114
msgid ""
"Window controls are the buttons used to close, maximize and minimize "
"windows. These vary across Linux desktops, particularly in terms of which "
"controls are shown. Whether applications follow these variations is at their "
"discretion. Providing the exact same controls as used by a particular "
"desktop environment should not be seen as a hard requirement."
msgstr ""

#: ../../../docs/desktop-integration.rst:120
msgid ""
"From a user experience perspective, it is important to ensure that window "
"controls appear on the same side of the window as in other desktop "
"applications. On Linux, this is the right side of the window (like Windows)."
msgstr ""

#: ../../../docs/desktop-integration.rst:124
msgid ""
"On X11, applications can rely on system-provided title bars if they don't "
"want to draw their own window controls. For a consistent Wayland experience, "
"applications must always provide their own. Typically, toolkits handle this, "
"but raw Wayland clients can use `libdecor <https://gitlab.freedesktop.org/"
"libdecor/libdecor>`_ for a general solution."
msgstr ""

#: ../../../docs/desktop-integration.rst:131
msgid "Window decorations"
msgstr ""

#: ../../../docs/desktop-integration.rst:133
msgid ""
"If your application uses a dark visual style as well as system-provided "
"window decorations, the ``GTK_THEME_VARIANT=dark`` X11 window property "
"should be used to ensure that window decorations match the rest of the "
"application window. This can be done by running::"
msgstr ""

#: ../../../docs/desktop-integration.rst:138
msgid "xprop -f _GTK_THEME_VARIANT 8u -set _GTK_THEME_VARIANT dark"
msgstr ""

#: ../../../docs/desktop-integration.rst:141
msgid "Global menus"
msgstr ""

#: ../../../docs/desktop-integration.rst:143
msgid ""
"If your application uses `Gtk.Application:menubar <https://docs.gtk.org/gtk4/"
"class.Application.html#properties>`_ or `QMenuBar <https://doc.qt.io/qt-6/"
"qmenubar.html>`_ it will work as expected within a sandboxed application."
msgstr ""

#: ../../../docs/desktop-integration.rst:147
msgid "Theming"
msgstr ""

#: ../../../docs/desktop-integration.rst:149
msgid ""
"Flatpak applications cannot directly use the system theme from the host as "
"the ``/usr`` directory inside the sandbox is reserved by the runtime, and "
"host's ``/usr`` where system themes are typically stored cannot be made "
"available over that. Additionally, themes often depend on specific toolkit "
"versions, which may differ between the host and the runtime. Relying on the "
"host to have the correct version for every flatpak also defeats the "
"portability benefits Flatpak provides."
msgstr ""

#: ../../../docs/desktop-integration.rst:157
msgid ""
"The solution to this is to package the themes as flatpaks. These themes are "
"provided as :doc:`extension` to the Freedesktop runtime for Gtk3 themes and "
"to the KDE runtime for Qt themes."
msgstr ""

#: ../../../docs/desktop-integration.rst:161
msgid ""
"The theming system requires Flatpak 0.8.4+ and applications using up-to-date "
"``org.gnome.Platform`` 3.24+, ``org.freedesktop.Platform`` 1.6+, or ``org."
"kde.Platform`` 5.9+."
msgstr ""

#: ../../../docs/desktop-integration.rst:166
msgid "Installing themes"
msgstr ""

#: ../../../docs/desktop-integration.rst:169
msgid "Instructions for Gtk themes"
msgstr ""

#: ../../../docs/desktop-integration.rst:171
msgid ""
"As of Flatpak 0.10.1, Flatpak can automatically detect the active Gtk theme "
"on the host by reading the value of the ``gtk-theme`` DConf key."
msgstr ""

#: ../../../docs/desktop-integration.rst:174
msgid ""
"If the corresponding theme is packaged as an extension in the remote, "
"Flatpak will automatically install it during ``flatpak install`` or "
"``flatpak update``."
msgstr ""

#: ../../../docs/desktop-integration.rst:179
msgid "Instructions for Qt themes"
msgstr ""

#: ../../../docs/desktop-integration.rst:181
msgid ""
"There are a few Qt theme extensions packaged on Flathub. To see a list, you "
"can run::"
msgstr ""

#: ../../../docs/desktop-integration.rst:184
msgid "$ flatpak remote-ls --columns=application flathub | grep org.kde.KStyle"
msgstr ""

#: ../../../docs/desktop-integration.rst:186
msgid "Then you can install the theme with::"
msgstr ""

#: ../../../docs/desktop-integration.rst:188
msgid "$ flatpak install flathub org.kde.KStyle.Foo"
msgstr ""

#: ../../../docs/desktop-integration.rst:190
msgid ""
"replacing ``Foo`` with the name of the desired theme. The theme needs to be "
"available for the KDE runtime branch used by the application."
msgstr ""

#: ../../../docs/desktop-integration.rst:194
msgid "Gtk look and feel in Qt applications"
msgstr ""

#: ../../../docs/desktop-integration.rst:196
msgid ""
"On Wayland, starting from the 5.15-22.08+ and 6.5+ branches of the ``org.kde."
"Platform`` runtime, ``org.kde.WaylandDecoration.QAdwaitaDecorations`` and "
"``org.kde.WaylandDecoration.QGnomePlatform-decoration`` need to be "
"installed. Please see the upstream `usage <https://github.com/FedoraQt/"
"QAdwaitaDecorations?tab=readme-ov-file#usage>`_ instructions as well."
msgstr ""

#: ../../../docs/desktop-integration.rst:202
msgid "These plugins will be part of upstream starting at Qt 6.8."
msgstr ""

#: ../../../docs/desktop-integration.rst:204
msgid ""
"For older runtimes, ``org.kde.PlatformTheme.QGnomePlatform`` and ``org.kde."
"WaylandDecoration.QGnomePlatform-decoration`` need to be installed."
msgstr ""

#: ../../../docs/desktop-integration.rst:209
msgid "Applying themes"
msgstr ""

#: ../../../docs/desktop-integration.rst:211
msgid ""
"The prerequisite for applying themes in Flatpak is to have the theme "
"available to the application in the sandbox, commonly done by packaging them "
"as theme extensions."
msgstr ""

#: ../../../docs/desktop-integration.rst:215
msgid ""
"Now the system theme needs to be communicated from the host to the sandbox."
msgstr ""

#: ../../../docs/desktop-integration.rst:217
msgid ""
"On X11, Gtk3 picks up themes from XSettings. Specifically, on GNOME, the "
"GNOME XSettings daemon ``gsd-xsettings`` reads the DConf values and converts "
"them into XSettings values. On GNOME, this should work by default, provided "
"``gsd-xsettings`` is running."
msgstr ""

#: ../../../docs/desktop-integration.rst:222
msgid ""
"On Wayland, the active theme is exposed via the corresponding Settings "
"portal. This requires the portal backend for the desktop environment to be "
"installed."
msgstr ""

#: ../../../docs/desktop-integration.rst:226
msgid ""
"Once the theme is installed and exposed in the sandbox, it will be "
"automatically applied, depending on the toolkit or libraries used by the "
"application."
msgstr ""

#: ../../../docs/desktop-integration.rst:230
msgid ""
"If the theme is not available via Flatpak extensions, or either the Settings "
"portal or XSettings support is lacking, Gtk and Qt applications will fall "
"back to using Adwaita or the default Qt theme."
msgstr ""

#: ../../../docs/desktop-integration.rst:234
msgid ""
"In that case, either the theme needs to be packaged as an extension, or the "
"application needs to have permission to read the theme and Gtk or Qt "
"settings from the host, usually by giving it filesystem access. This is "
"undesirable in most cases, as it weakens the sandbox and reduces "
"portability. Instead, desktop environments should provide proper support for "
"the Settings portal or XSettings daemon."
msgstr ""

#: ../../../docs/desktop-integration.rst:241
msgid ""
"If a Gtk theme is not packaged as an extension, an unmaintained extension "
"can be created for it. Please see :ref:`extension:Creating an unmaintained "
"Gtk theme extension`."
msgstr ""

#: ../../../docs/desktop-integration.rst:246
msgid "Appearance Settings"
msgstr ""

#: ../../../docs/desktop-integration.rst:248
msgid ""
"Appearance settings, such as the Freedesktop color-scheme preference, are "
"also exposed similarly via the respective Settings portal. The application "
"needs to support reading it, and the proper portal backends need to be "
"installed for this to work."
msgstr ""

#: ../../../docs/desktop-integration.rst:254
msgid "Icons"
msgstr ""

#: ../../../docs/desktop-integration.rst:256
msgid ""
"Since Flatpak 0.8.8, host icons from ``/usr/share/icons`` are exposed in the "
"sandbox at ``/run/host/share/icons`` and ``$XDG_DATA_HOME/icons`` in ``/run/"
"host/user-share/icons``."
msgstr ""

#: ../../../docs/desktop-integration.rst:260
msgid "``~/.icons`` is a legacy path and should not be used."
msgstr ""

#: ../../../docs/desktop-integration.rst:263
msgid "Fonts"
msgstr ""

#: ../../../docs/desktop-integration.rst:265
msgid ""
"Flatpak exposes fonts from the host to the sandbox, and the runtime ships "
"the default fontconfig from upstream."
msgstr ""

#: ../../../docs/desktop-integration.rst:268
msgid ""
"Fonts from ``/usr/share/fonts`` are exposed at ``/run/host/fonts``, from ``/"
"usr/local/share/fonts`` at ``/run/host/local-fonts``, and from "
"``$XDG_DATA_HOME/fonts`` at ``/run/host/user-fonts``."
msgstr ""

#: ../../../docs/desktop-integration.rst:272
msgid "``~/.fonts`` is a legacy path and should not be used."
msgstr ""

#: ../../../docs/desktop-integration.rst:274
msgid "Fontconfig config files from the host are not exposed."
msgstr ""
