# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-03 07:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../docs/python.rst:2
msgid "Python"
msgstr ""

#: ../../../docs/python.rst:4
msgid ""
"Python applications that use supported build systems like Meson, CMake, or "
"Autotools can be built using the standard method. However, many Python "
"applications use custom install scripts or are expected to be installed "
"through Setuptools and ``pip``."
msgstr ""

#: ../../../docs/python.rst:9
msgid ""
"For these cases, ``flatpak-builder`` provides the ``simple`` buildsystem. "
"Rather than automating the build process, ``simple`` accepts a ``build-"
"commands`` array of strings, which are executed in sequence."
msgstr ""

#: ../../../docs/python.rst:13
msgid ""
"For example, the following YAML makes building the popular requests module "
"rather straightforward:"
msgstr ""

#: ../../../docs/python.rst:16
msgid ""
"name: requests\n"
"buildsystem: simple\n"
"build-commands:\n"
"  - pip3 install --prefix=/app --no-deps .\n"
"sources:\n"
"  - type: archive\n"
"    url: https://files.pythonhosted.org/packages/source/r/requests/"
"requests-2.18.4.tar.gz\n"
"    sha256: 9c443e7324ba5b85070c4a818ade28bfabedf16ea10206da1132edaa6dda237e"
msgstr ""

#: ../../../docs/python.rst:27
msgid ""
"Here, ``build-commands`` is an array containing the commands required to "
"build and install the module. As can be seen, in this case ``pip`` is run to "
"do this. Here, the ``--prefix=/app`` option is important, because otherwise "
"``pip`` would try to install the module under ``/usr/`` which, because ``/"
"usr/`` is mounted read-only inside the sandbox, would fail."
msgstr ""

#: ../../../docs/python.rst:33
msgid ""
"Note that ``--no-deps`` is only used for the purpose of the example - since "
"the requests module has its own dependencies, the build would fail. If "
"multiple dependencies are required, it is better to install them using the "
"method in the next section, instead."
msgstr ""

#: ../../../docs/python.rst:39
msgid "Building multiple Python dependencies"
msgstr ""

#: ../../../docs/python.rst:41
msgid ""
"Even though the example above installs, it won't actually work. This is "
"because the requests module has a number of dependencies that haven't been "
"installed:"
msgstr ""

#: ../../../docs/python.rst:44
msgid "certifi"
msgstr ""

#: ../../../docs/python.rst:45
msgid "chardet"
msgstr ""

#: ../../../docs/python.rst:46
msgid "idna"
msgstr ""

#: ../../../docs/python.rst:47
msgid "urllib3"
msgstr ""

#: ../../../docs/python.rst:49
msgid ""
"Four dependencies aren't very many, and could be installed using the "
"``simple`` method described above. However, anything more complex than this "
"would quickly become tedious."
msgstr ""

#: ../../../docs/python.rst:53
msgid ""
"For these cases, `flatpak-pip-generator <https://github.com/flatpak/flatpak-"
"builder-tools/tree/master/pip>`_ can be used to generate the necessary "
"manifest JSON. This is a Python script that takes a package name and uses "
"``pip`` to identify its dependencies, along with their tarball URLs and "
"hashes."
msgstr ""

#: ../../../docs/python.rst:59
msgid "Using ``flatpak-pip-generator`` is as simple as running::"
msgstr ""

#: ../../../docs/python.rst:61
msgid "$ python3 flatpak-pip-generator requests"
msgstr ""

#: ../../../docs/python.rst:63
msgid ""
"Or if you have a ``requirements.txt`` file you can generate modules for "
"every listed package::"
msgstr ""

#: ../../../docs/python.rst:66
msgid "$ python3 flatpak-pip-generator --requirements-file=requirements.txt"
msgstr ""

#: ../../../docs/python.rst:68
msgid ""
"This will output a file called ``python3-requests.json``, containing the "
"necessary manifest JSON, which can then be included in your application's "
"manifest file. Even if your manifest uses YAML, you can still include JSON "
"like this::"
msgstr ""

#: ../../../docs/python.rst:73
msgid ""
"modules:\n"
"  - python3-requests.json\n"
"  # (other modules go here)"
msgstr ""
